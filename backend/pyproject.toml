[project]
name = "backend"
version = "0.1.0"
description = ""
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
  "aiomqtt>=2.3.1,<3.0.0",
  "aiosqlite>=0.21.0,<0.22.0",
  "alembic>=1.16.5,<2.0.0",
  "cryptography>=44.0.2,<45.0.0",
  "fastapi[standard]>=0.115.12,<0.116.0",
  "meshtastic>=2.6.3,<3.0.0",
  "protobuf>=6.30.2,<7.0.0",
  "sqlalchemy-utils>=0.41.2,<0.42.0",
  "sqlalchemy>=2.0.40,<3.0.0",
  "tabulate>=0.9.0,<0.10.0",
]

[dependency-groups]
dev = [
    "ruff>=0.12.0",
]

[tool.ruff.lint]
extend-select = [
    # Correctness / possible bugs
    "B",      # flake8-bugbear - silent logic errors, mutable default args, etc.
    "UP",     # pyupgrade - use modern syntax, drop dead code paths.
    "PERF",   # perflint - obvious performance foot-guns.
    "ARG",    # flake8-unused-arguments.
    "C4",     # flake8-comprehensions - wasted work in comprehensions.
    "SIM",    # flake8-simplify - redundant if/else, needless `format`, etc.
    "ERA",    # eradicate - commented-out code.

    # API & naming consistency
    "N",      # pep8-naming.
    "ANN",    # flake8-annotations - enforce type hints where they matter.
    "D",      # pydocstyle - docstring conventions (pair with your doc style).

    # Imports hygiene
    "I",      # isort rules (keeps Black-compatible import ordering).
    "TID",    # flake8-tidy-imports - ban star & relative imports, etc.
    "TC",     # flake8-type-checking - keep heavy imports behind `if TYPE_CHECKING:`.

    # Security & bad patterns
    "S",      # flake8-bandit - obvious security pitfalls.
    "FBT",    # flake8-boolean-trap - `is True` / `== True` bugs.
    "TRY",    # tryceratops - broken `try/except` patterns.

    # Ruff-specific and misc batteries
    "RUF",    # Ruff's own checks (catch common mis-uses of the language).
    "PTH",    # use-pathlib - stop using `os.path.join` on new code.
]

ignore = [
    "TRY003",  # Allow specifying messages outside the exception class
    "TRY301",  # False positives: flags legitimate raises that bubble up, not redundant raise/catch in same try block
    "D203",    # Incompatible with D211; prefer no-blank-line-before-class (D211)
    "D213",    # Incompatible with D212; prefer multi-line summary on first line (D212)
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
